#!/usr/bin/env python3
# Needs Python 3.5 or newer!

# MODULES ################################################################################

# Make sure modules can be found
import sys
sys.path.append("/usr/local/lib/python2.7/dist-packages/")

# Standard/Included modules
import os, os.path, socket, time, shelve #, traceback

# Use requests module to test websites
import requests

# Use module regex instead of re, much faster less bugs
import regex


# VARIABLES ##############################################################################

if sys.argv[1:]:
    domains_file = sys.argv[1]
else:
    print('Usage: {0} <domains-file>'.format(sys.argv[0]))
    sys.exit(1)

# Main whois-server we are asking first
whois_server = 'whois.iana.org'

# Keep track of referers
referers = dict()
status_cache = dict()

### Regexes
isdomain = regex.compile('(?=^.{1,252}[a-z]$)(^((?!-)[a-z0-9_-]{0,62}[a-z0-9]\.)*(xn--[a-z0-9-]{1,59}|[a-z]{2,63})$)', regex.I)

# CODE ###################################################################################

def get_value(lines, tag):
    '''Get value from output'''
    for line in lines:
        entry = line.strip()
        if entry[0:]:
            print('---- WHOIS-OUTPUT: {0}'.format(entry))
            if regex.search('^\s*' + tag + '\s*:', entry, regex.I):
                return regex.split('\s*:\s*', entry, regex.I)[1]
       
    return None


def whois(server, domain, comment):
    '''Whois comms'''
    print('-- WHOIS: {0} ({1}) for {2}'.format(server, comment, domain))

    result = None

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server, 43))

    try:
        #convert string to bytes, socket need bytes
        s.send((domain + "\r\n").encode())

    except BaseException as err:
        print('ERROR: Problems with \"{0}\" for \"{1}\" - {2}'.format(server, domain, err))
        return ''

    #declares a bytes
    response = b''
    while True:
       data = s.recv(4096)
       response += data
       if not data:
           break

    s.close()

    if response:
        result = response.decode().splitlines()

    return result


def whois_lookup(server, domain):
    '''Whois lookup'''
    dom = ''
    referer = False
    for label in regex.split('\.', domain)[::-1]:
        if dom:
           dom = label + '.' + dom
        else:
           dom = label

        referer = referers.get(dom, False)
        if not referer:
            response = whois(server, domain, 'NEW')
            referer = get_value(response, 'refer(er)*')
            if referer:
                referers[dom] = referer
                print('---- REFERER: {0} for {1}'.format(referer, domain))
            else:
                break
        else:
            break

    if referer:
        response = whois(referer, domain, 'NEW')
        if response:
            status = get_value(response, 'status')
            expiration = get_value(response, 'Registry Expiry Date:')
            return status, expiration

    return None, None
  

if __name__ == '__main__':
    '''Main beef'''
    try:
        f = open(domains_file, 'r')
        lines = f.read().splitlines()
        f.close()

    except BaseException as err:
        print('ERROR: Unable to open/read/process file \"{0}\" - {1}'.format(domains_file, err))
        sys.exit(1)

    count = 0
    for line in lines:
        count += 1
        entry = regex.split('#', regex.split('\s+', line)[0].strip().lower())[0]
        if entry and isdomain.search(entry):
            print('\n\nProcessing domain \"{0}\"'.format(entry))
            status, expdate = whois_lookup(whois_server, entry)
            print('-- WHOIS: Status={0} Expdate={1}'.format(status, expdate))
        else:
            print('WARNING [Line #{0}]: Invalid domain \"{1}\"'.format(count, entry))

    sys.exit(0)

# <EOF>
